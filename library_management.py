# -*- coding: utf-8 -*-
"""Library Management

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z5WkCa2dueT0sZhU1f7vTQfekbdnOZYF
"""

class Book:
    def __init__(self, title, author, isbn):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.available = True

    def __str__(self):
        return f"{self.title} by {self.author} (ISBN: {self.isbn}) - {'Available' if self.available else 'Borrowed'}"

    def borrow(self):
        if self.available:
            self.available = False
        else:
            raise Exception("Book is already borrowed.")

    def return_book(self):
        self.available = True

class Member:
    def __init__(self, member_id, name):
        self.member_id = member_id
        self.name = name
        self.borrowed_books = []

    def __str__(self):
        books = ", ".join(book.title for book in self.borrowed_books) if self.borrowed_books else "No books borrowed"
        return f"Member {self.name} (ID: {self.member_id}) - Borrowed books: {books}"

    def borrow_book(self, book):
        self.borrowed_books.append(book)
        book.borrow()

    def return_book(self, book):
        self.borrowed_books.remove(book)
        book.return_book()

class Library:
    def __init__(self):
        self.books =[]
        self.members = []

    def add_book(self, book):
        self.books.append(book)

    def add_member(self, member):
        self.members.append(member)

    def find_book_by_isbn(self, isbn):
        for book in self.books:
            if book.isbn == isbn:
                return book
        return None

    def find_member_by_id(self, member_id):
        for member in self.members:
            if member.member_id == member_id:
                return member
        return None

    def lend_book(self, member_id, isbn):
        member = self.find_member_by_id(member_id)
        book = self.find_book_by_isbn(isbn)
        if member and book:
            try:
                member.borrow_book(book)
                print(f"{member.name} borrowed '{book.title}'.")
            except Exception as e:
                print(e)
        else:
            print("Member or book not found.")

    def return_book(self, member_id, isbn):
        member = self.find_member_by_id(member_id)
        book = self.find_book_by_isbn(isbn)
        if member and book:
            member.return_book(book)
            print(f"{member.name} returned '{book.title}'.")
        else:
            print("Member or book not found.")

    def display_available_books(self):
        available_books = [book for book in self.books if book.available]
        if available_books:
            print("Available books:")
            for book in available_books:
                print(book)
        else:
            print("No books available.")

    def display_borrowed_books(self):
        borrowed_books = [book for book in self.books if not book.available]
        if borrowed_books:
            print("Borrowed books:")
            for book in borrowed_books:
                print(book)
        else:
            print("No books are borrowed.")

def main():
  library = Library()

  # Adding Books
  book1 = Book("1984", "George Orwell", "456789")
  book2 = Book("ThamePo", "William Jakarpatr", "789654")
  library.add_book(book1)
  library.add_book(book2)

  #Adding Members
  member1 = Member(1, "Joong")
  member2 = Member(2, "Phuwin")
  library.add_member(member1)
  library.add_member(member2)

  #Implementation
  library.display_available_books()
  library.lend_book(1, "ThamePo")
  library.display_available_books()
  library.display_borrowed_books()
  library.lend_book(2, "1984")
  library.return_book(1, "ThamePo")


  library.display_available_books()

if __name__ == "__main__":
  main()