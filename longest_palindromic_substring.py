# -*- coding: utf-8 -*-
"""Longest Palindromic Substring

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eldYdZb5rwcba3Uf1CDG0rE1HVRrEiKT
"""

def longest_palindrome(s):
  longest = ''                  # Empty string to store the longest palindrome substring
  n = len (s)                   # Length of input string

  # Outer loop: Interate over each character in the string
  for i in range(n):
    # Inner loop: Iterate over each character from the current position to the end of the string
    for j in range(i+1, n+1):
      word = s[i:j]             # Extract the substring from index i to j
      if word == word[::-1]:      # Check if the substring is a palindrome
        if len(word) > len(longest):  # If it's a palindrome and longer than the current longest, update 'longest'
          longest = word
  return longest

# Example
print(longest_palindrome('babad'))

"""When i = 0:

j =1 'b' (palindrome, update = 'b')

j = 2 'ba'

j = 3 'bab' (palindrome, longest)

j = 4 'baba'

j = 5 'babad'


When i = 1:

j = 2 'a' (palindrome, but shorter than 'bab')

j = 3 'ab'

j = 4 'aba' (palindrome)

j = 5 'abad'


When i = 2:

j = 3 'b'  (palindrome, but shorter than 'bab')

j = 4 'ba'

j = 5 'bad'


When i = 3:

j = 4 'a'  (palindrome, but shorter than 'bab')

j = 5 'ad'


When i = 4:

j = 5 'd'  (palindrome, but shorter than 'bab')


Runtime Complexity:

* The nested loops generate O(n^2).

* Check if the substring is a palindrome takes O(n).

* Overall time complexity: O(n^3).
"""

def longestPalindrome(s):
  # Helper function to expand around a center (left and right) as long as the characters at these indices are equal and find the longest palindrome
  def expand_around_center(left, right):
    while left >= 0 and right < len(s) and s[left] == s[right]:
      left -= 1       # Move left pointer outward
      right += 1      # Move right pointer outward

    return s[left + 1:right]    # Return the palindrome found

  longest = ''        # To store the longest palindrome

  for i in range (len(s)):
    # Check for odd-length palindrom
    palindrome1 = expand_around_center(i,i)
    # Check for even-length palindrome
    palindrome2 = expand_around_center(i, i+1)
    # Update the longest palindrome found
    longest = max(longest, palindrome1, palindrome2, key=len)

  return longest

# Example
print(longestPalindrome('babad'))

"""Time Complexity:

* We expand at O(n) times for each of the O(n) centers.

* Overall time complexity: O(n^2).

Odd Length Palindromes:

Center at i = 0: b

'b'

Center at i = 1: a

'bab'

Center at i = 2: b

'aba'

Center at i = 3: a

'a'

Center at i = 4: d

'd'

Even Length Palindromes:

Center at i = 0: b

Center at i = 1: a

Center at i = 2: b

Center at i = 3: a

Center at i = 4: d
"""

# Example
print(longestPalindrome('cddb'))

"""Odd Length Palindromes:

Center at i = 0: c

'c'

Center at i = 1: d

'd'

Center at i = 2: d

'd'

Center at i = 3: b

'b'

Even Length Palindromes:

Center at i = 0: c

'c'

Center at i = 1: d

'dd'

Center at i = 2: d

'd'

Center at i = 3: b

"""