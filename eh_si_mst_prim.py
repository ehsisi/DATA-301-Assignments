# -*- coding: utf-8 -*-
"""Eh Si-MST-Prim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SqFskO2pQ07iPGO45nI9Tk6JGZWPWy1_
"""

def parami_p(graph, start):
    visited = set()     # a set to keep track of visited nodes
    edges = []          # a list to store edges we're considering (weight, u, v)
    mst = []            # a list to store edges in MST
    total_cost = 0

    visited.add(start)

    # Add all edges connected to the start node to consideration list
    for neighbor, weight in graph[start]:
        edges.append((weight, start, neighbor))

    while len(visited) < len(graph):
        # Manually find the edge with the smallest weight
        min_edge = None             # min edge to none
        min_weight = float('inf')   # min weight to infinity

        for edge in edges:          # Iterate all edges
            weight, u, v = edge
            if weight < min_weight and v not in visited:
                min_weight = weight
                min_edge = edge


        if min_edge is None:
            break  # No more edges to process (graph may not be connected)

        weight, u, v = min_edge       # check valid edge
        edges.remove(min_edge)        # remove from consideration list
        visited.add(v)                # mark as visited node
        mst.append((u, v, weight))    # add edge to mst
        total_cost += weight          # add the weight to total cost

        # Add new edges from the newly visited node
        for neighbor, w in graph[v]:
            if neighbor not in visited:
                edges.append((w, v, neighbor))

    return mst, total_cost

graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('A', 1), ('C', 2), ('D', 5)],
    'C': [('A', 4), ('B', 2), ('D', 1)],
    'D': [('B', 5), ('C', 1)]
}

mst, cost = parami_p(graph, 'A')          # Changed the name from prim_no_heap to parami_p

print("Edges in MST:")
for u, v, w in mst:
    print(f"{u} - {v} : {w}")
print("Total Cost:", cost)

"""**Expected Output**


Edges in MST:

A - B : 1

B - C : 2

C - D : 1
Total Cost: 4

"""